{"version":3,"sources":["lib/parser.js","lib/codes.js","lib/asm2machine.js","App.js","index.js"],"names":["peg$SyntaxError","message","expected","found","location","this","name","Error","captureStackTrace","child","parent","ctor","constructor","prototype","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","class","i","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","module","exports","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","Instruction","peg$parseInstruction","peg$startRuleFunction","peg$c0","peg$c1","peg$literalExpectation","peg$c2","peg$c3","peg$c4","target","source","tag","operands","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","cast","value","size","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","label","index","deref","peg$c22","number","peg$c23","peg$c24","peg$c25","local","peg$c26","baseReg","baseRegister","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","register","multiplier","peg$c32","peg$c33","peg$c34","operator","constant","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","peg$c95","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","peg$c110","peg$c111","peg$c112","peg$c113","peg$c114","peg$c115","peg$c116","peg$c117","peg$c118","peg$c119","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","peg$c128","peg$c129","peg$c130","peg$c131","peg$c132","peg$c133","peg$c134","peg$c135","peg$c136","peg$c137","peg$c138","peg$c139","peg$c140","peg$c141","peg$c142","peg$c143","peg$c144","peg$c145","peg$c146","peg$c147","peg$c148","peg$c149","peg$c150","peg$c151","peg$c152","peg$c153","peg$c154","peg$c155","peg$c156","peg$c157","peg$c158","peg$c159","peg$c160","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c167","peg$c168","peg$c169","peg$classExpectation","peg$c170","peg$c171","peg$c172","peg$c173","peg$c174","peg$c175","peg$c176","peg$c177","parseInt","peg$c178","peg$c179","peg$c180","peg$c181","peg$otherExpectation","peg$c182","peg$c183","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","substring","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","peg$buildStructuredError","s0","s1","s2","s3","s5","s7","substr","toLowerCase","peg$parse_","peg$parseWritableExpression","peg$parseReadableExpression","peg$parseMemoryInstruction","s4","s6","peg$parseArithmeticInstruction","peg$parseRegister","peg$parseSizeCast","peg$parseRegisterDereferenceExpression","peg$parseAddressDereferenceExpression","peg$parseLabelExpression","peg$parseNumber","peg$parseIndexExpression","test","charAt","peg$parseIdentifier","s8","register_op_32bit","al","cl","dl","bl","ah","dh","bh","ax","cx","dx","bx","eax","ecx","edx","ebx","sp","bp","esp","ebp","si","di","esi","edi","instructions","add","mov","sub","and","or","xor","scale","1","2","4","8","dec2hex_reverse","disp","tmp","zz","yy","xx","res2string","result","Prefix","OpCode","D","W","MOD","Reg","RM","Scale","Index","Base","Displacement","res","match","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_onConvertClick","instruction","parsed_instruction","parser","console","log","JSON","stringify","Data","operand1","operand2","rm_field","reg","rm_reg","asm2machine","state","setState","output","error","alert","_this2","react_default","a","createElement","className","Input","action","content","onClick","focus","labelPosition","onChange","event","data","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.719465b8.chunk.js","sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Instruction: peg$parseInstruction },\n      peg$startRuleFunction  = peg$parseInstruction,\n\n      peg$c0 = \"mov\",\n      peg$c1 = peg$literalExpectation(\"MOV\", true),\n      peg$c2 = \",\",\n      peg$c3 = peg$literalExpectation(\",\", false),\n      peg$c4 = function(name, target, source) { return { tag: \"Instruction\", type: \"Memory\", name: name, operands: [target, source] }; },\n      peg$c5 = \"add\",\n      peg$c6 = peg$literalExpectation(\"ADD\", true),\n      peg$c7 = \"sub\",\n      peg$c8 = peg$literalExpectation(\"SUB\", true),\n      peg$c9 = \"and\",\n      peg$c10 = peg$literalExpectation(\"AND\", true),\n      peg$c11 = \"or\",\n      peg$c12 = peg$literalExpectation(\"OR\", true),\n      peg$c13 = \"xor\",\n      peg$c14 = peg$literalExpectation(\"XOR\", true),\n      peg$c15 = function(name, target, source) { return { tag: \"Instruction\", type: \"Arithmetic\", name: name, operands: [target, source] }; },\n      peg$c16 = function(cast, value) { return { tag: \"Cast\", size: cast, value: value }; },\n      peg$c17 = \"[\",\n      peg$c18 = peg$literalExpectation(\"[\", false),\n      peg$c19 = \"]\",\n      peg$c20 = peg$literalExpectation(\"]\", false),\n      peg$c21 = function(label, index) { return { tag: \"Label\", value: label.value, deref: true, index: index }; },\n      peg$c22 = function(number, index) { return { tag: \"Number\", value: number.value, deref: true, index: index }; },\n      peg$c23 = \".\",\n      peg$c24 = peg$literalExpectation(\".\", false),\n      peg$c25 = function(local, target) { return { tag: \"Label\", value: local !== null ? (\".\" + target.value) : target.value }; },\n      peg$c26 = function(baseReg, index) {\r\n          \treturn {\r\n          \t\ttag: \"Mem\",\r\n              \tbaseRegister: baseReg,\r\n              \tindex: index\r\n          \t};\r\n          },\n      peg$c27 = \"+\",\n      peg$c28 = peg$literalExpectation(\"+\", false),\n      peg$c29 = \"*\",\n      peg$c30 = peg$literalExpectation(\"*\", false),\n      peg$c31 = function(register, multiplier) { return { register: register, multiplier: multiplier.value } },\n      peg$c32 = \"-\",\n      peg$c33 = peg$literalExpectation(\"-\", false),\n      peg$c34 = function(index, operator, constant) {\r\n                          \tif (operator === \"-\")\r\n                          \t{\r\n                          \t\tconstant.value *= -1;\r\n                          \t}\r\n                          \treturn constant;\r\n                          },\n      peg$c35 = function(index, constant) { return { index: index, constant: constant }; },\n      peg$c36 = \"eax\",\n      peg$c37 = peg$literalExpectation(\"eax\", true),\n      peg$c38 = \"ebx\",\n      peg$c39 = peg$literalExpectation(\"ebx\", true),\n      peg$c40 = \"ecx\",\n      peg$c41 = peg$literalExpectation(\"ecx\", true),\n      peg$c42 = \"edx\",\n      peg$c43 = peg$literalExpectation(\"edx\", true),\n      peg$c44 = \"esp\",\n      peg$c45 = peg$literalExpectation(\"esp\", true),\n      peg$c46 = \"ebp\",\n      peg$c47 = peg$literalExpectation(\"ebp\", true),\n      peg$c48 = \"esi\",\n      peg$c49 = peg$literalExpectation(\"esi\", true),\n      peg$c50 = \"edi\",\n      peg$c51 = peg$literalExpectation(\"edi\", true),\n      peg$c52 = \"eip\",\n      peg$c53 = peg$literalExpectation(\"eip\", true),\n      peg$c54 = \"r8d\",\n      peg$c55 = peg$literalExpectation(\"r8d\", true),\n      peg$c56 = \"r9d\",\n      peg$c57 = peg$literalExpectation(\"r9d\", true),\n      peg$c58 = \"r10d\",\n      peg$c59 = peg$literalExpectation(\"r10d\", true),\n      peg$c60 = \"r11d\",\n      peg$c61 = peg$literalExpectation(\"r11d\", true),\n      peg$c62 = \"r12d\",\n      peg$c63 = peg$literalExpectation(\"r12d\", true),\n      peg$c64 = \"r13d\",\n      peg$c65 = peg$literalExpectation(\"r13d\", true),\n      peg$c66 = \"r14d\",\n      peg$c67 = peg$literalExpectation(\"r14d\", true),\n      peg$c68 = \"r15d\",\n      peg$c69 = peg$literalExpectation(\"r15d\", true),\n      peg$c70 = function() { return { tag: \"Reg\", name: text(), size: 32 }; },\n      peg$c71 = \"ax\",\n      peg$c72 = peg$literalExpectation(\"ax\", true),\n      peg$c73 = \"bx\",\n      peg$c74 = peg$literalExpectation(\"bx\", true),\n      peg$c75 = \"cx\",\n      peg$c76 = peg$literalExpectation(\"cx\", true),\n      peg$c77 = \"dx\",\n      peg$c78 = peg$literalExpectation(\"dx\", true),\n      peg$c79 = \"cs\",\n      peg$c80 = peg$literalExpectation(\"cs\", true),\n      peg$c81 = \"ds\",\n      peg$c82 = peg$literalExpectation(\"ds\", true),\n      peg$c83 = \"ss\",\n      peg$c84 = peg$literalExpectation(\"ss\", true),\n      peg$c85 = \"es\",\n      peg$c86 = peg$literalExpectation(\"es\", true),\n      peg$c87 = \"fs\",\n      peg$c88 = peg$literalExpectation(\"fs\", true),\n      peg$c89 = \"gs\",\n      peg$c90 = peg$literalExpectation(\"gs\", true),\n      peg$c91 = \"sp\",\n      peg$c92 = peg$literalExpectation(\"sp\", true),\n      peg$c93 = \"bp\",\n      peg$c94 = peg$literalExpectation(\"bp\", true),\n      peg$c95 = \"si\",\n      peg$c96 = peg$literalExpectation(\"si\", true),\n      peg$c97 = \"ip\",\n      peg$c98 = peg$literalExpectation(\"ip\", true),\n      peg$c99 = \"r8w\",\n      peg$c100 = peg$literalExpectation(\"r8w\", true),\n      peg$c101 = \"r9w\",\n      peg$c102 = peg$literalExpectation(\"r9w\", true),\n      peg$c103 = \"r10w\",\n      peg$c104 = peg$literalExpectation(\"r10w\", true),\n      peg$c105 = \"r11w\",\n      peg$c106 = peg$literalExpectation(\"r11w\", true),\n      peg$c107 = \"r12w\",\n      peg$c108 = peg$literalExpectation(\"r12w\", true),\n      peg$c109 = \"r13w\",\n      peg$c110 = peg$literalExpectation(\"r13w\", true),\n      peg$c111 = \"r14w\",\n      peg$c112 = peg$literalExpectation(\"r14w\", true),\n      peg$c113 = \"r15w\",\n      peg$c114 = peg$literalExpectation(\"r15w\", true),\n      peg$c115 = function() { return { tag: \"Reg\", name: text(), size: 16 } },\n      peg$c116 = \"al\",\n      peg$c117 = peg$literalExpectation(\"al\", true),\n      peg$c118 = \"ah\",\n      peg$c119 = peg$literalExpectation(\"ah\", true),\n      peg$c120 = \"bl\",\n      peg$c121 = peg$literalExpectation(\"bl\", true),\n      peg$c122 = \"bh\",\n      peg$c123 = peg$literalExpectation(\"bh\", true),\n      peg$c124 = \"cl\",\n      peg$c125 = peg$literalExpectation(\"cl\", true),\n      peg$c126 = \"ch\",\n      peg$c127 = peg$literalExpectation(\"ch\", true),\n      peg$c128 = \"dl\",\n      peg$c129 = peg$literalExpectation(\"dl\", true),\n      peg$c130 = \"dh\",\n      peg$c131 = peg$literalExpectation(\"dh\", true),\n      peg$c132 = \"spl\",\n      peg$c133 = peg$literalExpectation(\"spl\", true),\n      peg$c134 = \"bpl\",\n      peg$c135 = peg$literalExpectation(\"bpl\", true),\n      peg$c136 = \"sil\",\n      peg$c137 = peg$literalExpectation(\"sil\", true),\n      peg$c138 = \"dil\",\n      peg$c139 = peg$literalExpectation(\"dil\", true),\n      peg$c140 = \"r8b\",\n      peg$c141 = peg$literalExpectation(\"r8b\", true),\n      peg$c142 = \"r9b\",\n      peg$c143 = peg$literalExpectation(\"r9b\", true),\n      peg$c144 = \"r10b\",\n      peg$c145 = peg$literalExpectation(\"r10b\", true),\n      peg$c146 = \"r11b\",\n      peg$c147 = peg$literalExpectation(\"r11b\", true),\n      peg$c148 = \"r12b\",\n      peg$c149 = peg$literalExpectation(\"r12b\", true),\n      peg$c150 = \"r13b\",\n      peg$c151 = peg$literalExpectation(\"r13b\", true),\n      peg$c152 = \"r14b\",\n      peg$c153 = peg$literalExpectation(\"r14b\", true),\n      peg$c154 = \"r15b\",\n      peg$c155 = peg$literalExpectation(\"r15b\", true),\n      peg$c156 = function() { return { tag: \"Reg\", name: text(), size: 8 } },\n      peg$c157 = \"byte\",\n      peg$c158 = peg$literalExpectation(\"BYTE\", true),\n      peg$c159 = function() { return 8; },\n      peg$c160 = \"word\",\n      peg$c161 = peg$literalExpectation(\"WORD\", true),\n      peg$c162 = function() { return 16; },\n      peg$c163 = \"dword\",\n      peg$c164 = peg$literalExpectation(\"DWORD\", true),\n      peg$c165 = function() { return 32; },\n      peg$c166 = \"\",\n      peg$c167 = function() { return 0; },\n      peg$c168 = /^[a-zA-Z_]/,\n      peg$c169 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\"], false, false),\n      peg$c170 = /^[a-zA-Z_0-9]/,\n      peg$c171 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", [\"0\", \"9\"]], false, false),\n      peg$c172 = function() { return { tag: \"Identifier\", value: text() }; },\n      peg$c173 = \"0x\",\n      peg$c174 = peg$literalExpectation(\"0x\", false),\n      peg$c175 = /^[0-9a-fA-F]/,\n      peg$c176 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c177 = function() { return { tag: \"Number\", value: parseInt(text(), 16), size: 32 }; },\n      peg$c178 = /^[0-9]/,\n      peg$c179 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c180 = function() { return { tag: \"Number\", value: parseInt(text(), 10), size: 32 }; },\n      peg$c181 = peg$otherExpectation(\"whitespace\"),\n      peg$c182 = /^[ \\t\\r]/,\n      peg$c183 = peg$classExpectation([\" \", \"\\t\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseInstruction() {\n    var s0;\n\n    s0 = peg$parseMemoryInstruction();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseArithmeticInstruction();\n    }\n\n    return s0;\n  }\n\n  function peg$parseMemoryInstruction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c0) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1); }\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWritableExpression();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c2;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseReadableExpression();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c4(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArithmeticInstruction() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c5) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c6); }\n    }\n    if (s2 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c7) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c9) {\n          s2 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c11) {\n            s2 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c13) {\n              s2 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n          }\n        }\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWritableExpression();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c2;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c3); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseReadableExpression();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c15(s1, s3, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseWritableExpression() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parseRegister();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseSizeCast();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseRegisterDereferenceExpression();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c16(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseSizeCast();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseAddressDereferenceExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseReadableExpression() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parseRegister();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseSizeCast();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseRegisterDereferenceExpression();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c16(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseSizeCast();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseAddressDereferenceExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseSizeCast();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLabelExpression();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseSizeCast();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseNumber();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c16(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAddressDereferenceExpression() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c17;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLabelExpression();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIndexExpression();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c19;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c21(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c17;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c18); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNumber();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseIndexExpression();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s7 = peg$c19;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c22(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLabelExpression() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c23;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseIdentifier();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseRegisterDereferenceExpression() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c17;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseRegister();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIndexExpression();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c19;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c26(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIndexExpression() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseRegister();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s6 = peg$c29;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseNumber();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s1;\n                  s2 = peg$c31(s4, s8);\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s5 = peg$c27;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s5 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s5 = peg$c32;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = input.substring(s4, peg$currPos);\n        } else {\n          s4 = s5;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseNumber();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c34(s1, s4, s6);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseRegister() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {\n          s1 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c42) {\n            s1 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c45); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c48) {\n                  s1 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c49); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {\n                    s1 = input.substr(peg$currPos, 3);\n                    peg$currPos += 3;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c51); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c52) {\n                      s1 = input.substr(peg$currPos, 3);\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n                        s1 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c55); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c56) {\n                          s1 = input.substr(peg$currPos, 3);\n                          peg$currPos += 3;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c57); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c58) {\n                            s1 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c59); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {\n                              s1 = input.substr(peg$currPos, 4);\n                              peg$currPos += 4;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c61); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c62) {\n                                s1 = input.substr(peg$currPos, 4);\n                                peg$currPos += 4;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c64) {\n                                  s1 = input.substr(peg$currPos, 4);\n                                  peg$currPos += 4;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c65); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c66) {\n                                    s1 = input.substr(peg$currPos, 4);\n                                    peg$currPos += 4;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c67); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c68) {\n                                      s1 = input.substr(peg$currPos, 4);\n                                      peg$currPos += 4;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c69); }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c70();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c71) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c73) {\n          s1 = input.substr(peg$currPos, 2);\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c75) {\n            s1 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c76); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {\n              s1 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c78); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c79) {\n                s1 = input.substr(peg$currPos, 2);\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c80); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c81) {\n                  s1 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c82); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c83) {\n                    s1 = input.substr(peg$currPos, 2);\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c85) {\n                      s1 = input.substr(peg$currPos, 2);\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c86); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c87) {\n                        s1 = input.substr(peg$currPos, 2);\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c88); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c89) {\n                          s1 = input.substr(peg$currPos, 2);\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c91) {\n                            s1 = input.substr(peg$currPos, 2);\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c93) {\n                              s1 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c95) {\n                                s1 = input.substr(peg$currPos, 2);\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c95) {\n                                  s1 = input.substr(peg$currPos, 2);\n                                  peg$currPos += 2;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c97) {\n                                    s1 = input.substr(peg$currPos, 2);\n                                    peg$currPos += 2;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c99) {\n                                      s1 = input.substr(peg$currPos, 3);\n                                      peg$currPos += 3;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c101) {\n                                        s1 = input.substr(peg$currPos, 3);\n                                        peg$currPos += 3;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c103) {\n                                          s1 = input.substr(peg$currPos, 4);\n                                          peg$currPos += 4;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c105) {\n                                            s1 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c107) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c109) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c111) {\n                                                  s1 = input.substr(peg$currPos, 4);\n                                                  peg$currPos += 4;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                                                }\n                                                if (s1 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c113) {\n                                                    s1 = input.substr(peg$currPos, 4);\n                                                    peg$currPos += 4;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c114); }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c115();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c116) {\n          s1 = input.substr(peg$currPos, 2);\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c117); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c118) {\n            s1 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c119); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c120) {\n              s1 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c122) {\n                s1 = input.substr(peg$currPos, 2);\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c123); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {\n                  s1 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c125); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c126) {\n                    s1 = input.substr(peg$currPos, 2);\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c127); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c128) {\n                      s1 = input.substr(peg$currPos, 2);\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c130) {\n                        s1 = input.substr(peg$currPos, 2);\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c131); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c132) {\n                          s1 = input.substr(peg$currPos, 3);\n                          peg$currPos += 3;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {\n                            s1 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c136) {\n                              s1 = input.substr(peg$currPos, 3);\n                              peg$currPos += 3;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c137); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c138) {\n                                s1 = input.substr(peg$currPos, 3);\n                                peg$currPos += 3;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c139); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {\n                                  s1 = input.substr(peg$currPos, 3);\n                                  peg$currPos += 3;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c141); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {\n                                    s1 = input.substr(peg$currPos, 3);\n                                    peg$currPos += 3;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c143); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c144) {\n                                      s1 = input.substr(peg$currPos, 4);\n                                      peg$currPos += 4;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c146) {\n                                        s1 = input.substr(peg$currPos, 4);\n                                        peg$currPos += 4;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {\n                                          s1 = input.substr(peg$currPos, 4);\n                                          peg$currPos += 4;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c150) {\n                                            s1 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c151); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c152) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c153); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c154) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c155); }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c156();\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSizeCast() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c157) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c159();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c160) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c161); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c162();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {\n          s1 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c164); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c165();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$c166;\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c167();\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIdentifier() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (peg$c168.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c169); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c170.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c171); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c170.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c171); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c172();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c173) {\n      s1 = peg$c173;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c174); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c175.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c176); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c175.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c176); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c177();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c178.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c179); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c178.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c179); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c180();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c182.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c183); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c182.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c183); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c181); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","\r\n\r\nexport const register_op_32bit = {\r\n    al: \"000\", cl: \"001\", dl: \"010\", bl: \"011\",\r\n    ah: \"100\", ch: \"101\", dh: \"110\", bh: \"111\",\r\n    ax: \"000\", cx: \"001\", dx: \"010\", bx: \"011\",\r\n    eax: \"000\", ecx: \"001\", edx: \"010\", ebx: \"011\",\r\n    sp: \"100\", bp: \"101\",\r\n    esp: \"100\", ebp: \"101\",\r\n    si: \"110\", di: \"111\",\r\n    esi: \"110\", edi: \"111\"\r\n}\r\n\r\nexport const instructions = {\r\n    \"add\": \"000000\",\r\n    \"mov\": \"100010\",\r\n    \"sub\": \"001010\",\r\n    \"and\": \"001000\",\r\n    \"or\": \"000010\",\r\n    \"xor\": \"001100\",\r\n}\r\n\r\n\r\nexport const scale = {\r\n    1: \"00\", 2: \"01\", 4: \"10\", 8: \"11\"\r\n}\r\n\r\n","\r\nimport parser from './parser';\r\nimport { register_op_32bit, scale, instructions } from './codes';\r\n\r\nexport function dec2hex_reverse(disp) {\r\n    let tmp = disp.toString(16);\r\n    if (tmp.length <= 2) {\r\n        return tmp.length == 2 ? tmp : \"0\" + tmp;\r\n    }\r\n    while (tmp.length <= 8)\r\n        tmp = \"0\" + tmp;\r\n    const zz = tmp.slice(0, 2),\r\n        yy = tmp.slice(2, 4),\r\n        xx = tmp.slice(4, 6),\r\n        ww = tmp.slice(6, 8);\r\n    return ww + xx + yy + zz;\r\n}\r\n\r\nexport function res2string(result) {\r\n    const { Prefix, OpCode, D, W, MOD, Reg, RM, Scale, Index, Base, Displacement } = result;\r\n    let tmp = Prefix + OpCode + D + W + MOD + Reg + RM + Scale + Index + Base;\r\n    let res = parseInt(tmp, 2).toString(16) + Displacement;\r\n    if (res.length % 2)\r\n        res = \"0\" + res;\r\n    return (res.match(/.{1,2}/g).join(\", \"))\r\n}\r\n\r\nexport function asm2machine(instruction) {\r\n    let parsed_instruction = parser.parse(instruction);\r\n    console.log(parsed_instruction);\r\n    console.log(JSON.stringify(parsed_instruction));\r\n    let result = {\r\n        Prefix: \"\",\r\n        OpCode: \"\", D: \"\", W: \"\",\r\n        MOD: \"\", Reg: \"\", RM: \"\",\r\n        Scale: \"\", Index: \"\", Base: \"\",\r\n        Displacement: \"\",\r\n        Data: \"\"\r\n    }\r\n\r\n    result.OpCode = instructions[parsed_instruction.name];\r\n\r\n    let operand1 = parsed_instruction.operands[0],\r\n        operand2 = parsed_instruction.operands[1];\r\n    if (operand1.tag === \"Cast\" && operand2.tag === \"Cast\" && operand2.value.tag === \"Mem\")\r\n        throw Error(\"too many memory references!\");\r\n    else if (operand1.tag === \"Cast\" && operand2.tag === \"Cast\") {\r\n        //Todo\r\n    }\r\n\r\n    result.D = operand2.tag === \"Cast\" ? \"1\" : \"0\";\r\n    result.W = operand1.size === 32 || operand2.size === 32 ? \"1\" : \"0\";\r\n\r\n    let rm_field = result.D === \"0\" ? operand1 : operand2,\r\n        reg = result.D === \"0\" ? operand2 : operand1;\r\n\r\n    if (rm_field.tag === \"Reg\") {\r\n        result.MOD = \"11\";\r\n        result.Reg = register_op_32bit[reg.name];\r\n        result.RM = register_op_32bit[rm_field.name];\r\n    }\r\n    else if (rm_field.value.tag === \"Number\") {\r\n        result.MOD = rm_field.value.index.index == null ? \"00\" : \"10\";\r\n        result.RM = rm_field.value.index.index == null ? \"101\" : \"100\";\r\n        result.Reg = register_op_32bit[reg.name];\r\n        if (rm_field.value.index.index != null) {\r\n            result.Scale = scale[rm_field.value.index.index.multiplier];\r\n            result.Index = register_op_32bit[rm_field.value.index.index.register.name];\r\n            result.Base = \"101\";\r\n        }\r\n        result.Displacement = dec2hex_reverse(rm_field.value.value)\r\n    }\r\n    else {\r\n        let rm_reg = rm_field.value.baseRegister,\r\n            disp = rm_field.value.index.constant;\r\n        if (disp == null)\r\n            result.MOD = \"00\";\r\n        else {\r\n            result.MOD = disp.value < 256 ? \"01\" : \"10\";\r\n            result.Displacement = dec2hex_reverse(disp.value);\r\n        }\r\n\r\n        if (rm_field.value.index.index != null) {\r\n            result.RM = \"100\";\r\n            result.Scale = scale[rm_field.value.index.index.multiplier];\r\n            result.Index = register_op_32bit[rm_field.value.index.index.register.name];\r\n            result.Base = register_op_32bit[rm_reg.name];\r\n\r\n        }\r\n        else {\r\n            result.RM = register_op_32bit[rm_reg.name];\r\n        }\r\n        result.Reg = register_op_32bit[reg.name];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/*\r\n\r\n\r\nmov edi, [ebx]\r\n{\"tag\":\"Instruction\",\"type\":\"Memory\",\"name\":\"mov\",\"operands\":[\r\n    {\"tag\":\"Reg\",\"name\":\"edi\",\"size\":32},\r\n    {\"tag\":\"Cast\",\"size\":0,\r\n        \"value\":{\"tag\":\"Mem\",\r\n            \"baseRegister\":{\"tag\":\"Reg\",\"name\":\"ebx\",\"size\":32},\"index\":{\"index\":null,\"constant\":null}}}]}\r\n\r\n\r\nmov eax, [esi + 123]\r\n{\"tag\":\"Instruction\",\"type\":\"Memory\",\"name\":\"mov\",\"operands\":[\r\n    {\"tag\":\"Reg\",\"name\":\"eax\",\"size\":32},\r\n    {\"tag\":\"Cast\",\"size\":0,\r\n        \"value\":{\"tag\":\"Mem\",\r\n            \"baseRegister\":{\"tag\":\"Reg\",\"name\":\"esi\",\"size\":32},\r\n            \"index\":{\"index\":null,\"constant\":{\"tag\":\"Number\",\"value\":123,\"size\":4}}}}]}\r\n\r\n\r\nmov eax, [ebx + esi*4]\r\n{\"tag\":\"Instruction\",\"type\":\"Memory\",\"name\":\"mov\",\"operands\":[\r\n    {\"tag\":\"Reg\",\"name\":\"eax\",\"size\":32},\r\n    {\"tag\":\"Cast\",\"size\":0,\r\n        \"value\":{\"tag\":\"Mem\",\r\n            \"baseRegister\":{\"tag\":\"Reg\",\"name\":\"ebx\",\"size\":32},\r\n            \"index\":{\r\n                \"index\":{\r\n                    \"register\":{\"tag\":\"Reg\",\"name\":\"esi\",\"size\":32},\r\n                    \"multiplier\":4},\"constant\":null}}}]}\r\n\r\n{\"tag\":\"Instruction\",\"type\":\"Memory\",\"name\":\"mov\",\"operands\":[\r\n    {\"tag\":\"Cast\",\"size\":0,\r\n        \"value\":{\r\n            \"tag\":\"Mem\",\r\n            \"baseRegister\":{\"tag\":\"Reg\",\"name\":\"eax\",\"size\":32},\"index\":{\"index\":null,\"constant\":null}}},\r\n    {\"tag\":\"Cast\",\"size\":0,\r\n        \"value\":{\r\n            \"tag\":\"Number\",\r\n            \"value\":16,\"size\":4}}]}\r\n*/\r\n","import React, { Component } from 'react';\nimport { Input } from 'semantic-ui-react';\nimport { asm2machine, res2string } from './lib/asm2machine';\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            result: {},\n            output: \"\"\n        }\n    }\n\n    _onConvertClick = () => {\n        try {\n            let res = asm2machine(this.state.input);\n            this.setState({ result: res, output: res2string(res) });\n        }\n        catch (error) {\n            alert(error.message);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Input\n                        action={{ content: \"Convert\", onClick: this._onConvertClick, size: \"huge\" }}\n                        focus={true}\n                        label={{ content: \"input:\", size: \"small\" }}\n                        labelPosition=\"left\"\n                        onChange={(event, data) => this.setState({ input: data.value })}\n                        size=\"big\"\n                    />\n                    <pre>\n                        {JSON.stringify(this.state.result, null, '\\t')}\n                    </pre>\n                    <br />\n\n                    Hex output: {this.state.output}\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}